// @flow strict
type ExtractReturnType = <V>(() => V) => V;

declare export function createToObject<TConverterMap>(
  converter: TConverterMap
): (value: mixed) => $ObjMap<TConverterMap, ExtractReturnType>;

declare export function createToArray<TElement>(
  converter: (value: mixed) => TElement
): (value: mixed) => Array<TElement>;

declare export function toString(value: mixed): string;
declare export function toNumber(value: mixed): number;
declare export function toBoolean(value: mixed): boolean;

declare export class ConvertError extends Error {
  constructor(value: mixed, message: string): ConvertError;
  value: mixed;
}

declare export class NotAnObjectError extends ConvertError {
  constructor(value: mixed): NotAnObjectError;
}
declare export class NotArrayError extends ConvertError {
  constructor(value: mixed): NotArrayError;
}
declare export class NotBooleanError extends ConvertError {
  constructor(value: mixed): NotBooleanError;
}
declare export class NotNumberError extends ConvertError {
  constructor(value: mixed): NotNumberError;
}
declare export class NotStringError extends ConvertError {
  constructor(value: mixed): NotStringError;
}
declare export class ValueWasNullError extends ConvertError {
  constructor(): ValueWasNullError;
}

declare export class ElementError extends ConvertError {
  constructor(value: mixed, index: number, indexError: Error): ElementError;
  index: number;
  indexError: Error;
}
declare export class PropertyError extends ConvertError {
  constructor(value: mixed, property: string, propertyError: Error): PropertyError;
  property: string;
  propertyError: Error;
}